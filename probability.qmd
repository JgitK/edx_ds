
Discrete Probability

```{r}
library(gtools)
library(tidyverse)
```


Monte Carlo
```{r}
beads <- rep(c("red", "blue"), times = c(2, 3))
beads

sample(beads, 1)
```

```{r}
# Use replicate() for monte carlo:
B <- 10000
events <- replicate(B, sample(beads, 1))

tab <- table(events)
tab
prop.table(tab)
```

```{r}
# normally without replacement
sample(beads, 5)
sample(beads, 5)
sample(beads, 5)

# with replacement:
events <- sample(beads, B, replace = T)
prop.table(table(events))
```

Combinations and Permutations

```{r}
number <- "Three"
suit <- "Hearts"
paste(number, suit)

paste(letters[1:5], as.character(1:5))
```

```{r}
# expand.grid gives us combinations of two vectors:
expand.grid(pants = c("blue", "black"), shirt = c("white", "grey", "plaid"))

suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
numbers <- c("Ace", "Deuce", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
deck <- expand.grid(number = numbers, suit = suits)
deck <- paste(deck$number, deck$suit)

# Probability of pulling a king?
kings <- paste("King", suits)
mean(deck %in% kings)


```

```{r}
# Probability of pulling a king after already pulling a king?


permutations(3, 2) # <------ all the ways we can choose 2 numbers from the list "1, 2, 3"

all_phone_numbers <- permutations(10, 7, v = 0:9) # <--- 10 possible numbers, only choose a vector of 1-9

n <- nrow(all_phone_numbers)

index <- sample(n, 5)

all_phone_numbers[index,] # <---- five random seven digit phone numbers from all possible phone numbers( w/o repeats)
```

```{r}

hands <- permutations(52, 2, v = deck) # <---- all possible combos of 2 card draws

first_card <- hands[,1] # <----- grabs first column
second_card <- hands[,2] # <----- grabs second column

kings <- paste("King", suits)
sum(first_card %in% kings) # <---- how many first cards are kings?

sum(first_card %in% kings & second_card %in% kings) / 
  sum(first_card %in% kings) # <----- conditional probability: what fraction of the 204 also have a king in the second card?

# In R, this is the same as:
mean(first_card %in% kings & second_card %in% kings) / 
  mean(first_card %in% kings)
```

```{r}
# What if the order does not matter? <-- combinations
combinations(3, 2)

# Probability of a 'natural 21'
aces <- paste("Ace", suits)

facecard <- c("King", "Queen", "Jack", "Ten")
facecard <- expand.grid(number = facecard, suit = suits)
facecard <- paste(facecard$number, facecard$suit)

# How often do we get aces and a facecard?
hands <- combinations(52, 2, v = deck)
mean(hands[,1] %in% aces & hands[,2] %in% facecard)

# Monte Carlo simulation of same probability calculation:
B <- 10000

results <- replicate(B, { # <--- function as replicate() arg
  hand <- sample(deck, 2)
  (hand[1] %in% aces & hand[2] %in% facecard) |
    (hand[2] %in% aces & hand[1] %in% facecard)
})
mean(results)

# can also seperate function out...
blackjack <- function() {
   hand <- sample(deck, 2)
  (hand[1] %in% aces & hand[2] %in% facecard) | 
    (hand[2] %in% aces & hand[1] %in% facecard)
}

results <- replicate(B, blackjack())
mean(results)

```

Birthday problem:

```{r}
n <- 50
bdays <- sample(1:365, n, replace = T)
```

```{r}
# to check if two people with same birthday, can use duplicated() function
duplicated(c(1, 2, 3, 1, 4, 3, 5))

any(duplicated(bdays)) # <------ at least two people have same bday
```

```{r}
# to estimate probability...
B <- 10000
same_birthday <- function(n){
  bdays <- sample(1:365, n, replace = T)
  any(duplicated(bdays))
}
results <- replicate(B, same_birthday(50))
mean(results)
```

```{r}
# At what group size do the chances become greater than 50%? 75%?

# Create a look-up table; create function to compute this for any group size:
compute_prob <- function(n, B = 10000){
  results <- replicate(B, same_birthday(n))
  mean(results)
}

# Use sapply to perform element-wise operations on any function
n <- seq(1, 60)
prob <- sapply(n, compute_prob)

# plot the probability dist:
library(tidyverse)

qplot(n, prob) +
  labs(
    title = "Probability of duplicate birthdays in groups of n size"
  )
```

```{r}
# Exact probability:

exact_prob <- function(n){
  prob_unique <- seq(365, 365 - n + 1)/365 # <------- prob of no shared bdays
  1 - prod(prob_unique) # <---- prob of shared bdays = 1 - prob of no shared bdays
}
eprob <- sapply(n, exact_prob)

qplot(n, prob) + 
  geom_line(aes(n, eprob), col = "red")
```

```{r}
# How many monte carlos are enough?

# Check for ~stability~ of estimate:
B <- 10^seq(1, 5, len = 100)
compute_prob <- function(B, n = 25){
  same_day <- replicate(B, same_birthday(n))
  mean(same_day)
}
prob <- sapply(B, compute_prob)
plot(log10(B), prob)

# When B is large enough to show stabilization, we know we have enough simulations
```

```{r}
# Exercises

# 1

cyan <- 3
magenta <- 5
yellow <- 7

# Assign the variable 'p_yellow' as the probability that a yellow ball is drawn from the box.
p_yellow <- mean((rep(c("cyan", "magenta", "yellow"), times = c(3, 5, 7)) == "yellow"))

p_yellow <- yellow / (cyan + magenta + yellow)
# Using the variable 'p_yellow', calculate the probability of drawing a yellow ball on the sixth draw. Print this value to the console.
```

Monty Hall Problem

```{r}
# Simulate sticking to same door
B <- 10000

stick <- replicate(B, {
	doors <- as.character(1:3)
	prize <- sample(c("car","goat","goat"))    # Assigns a prize to a door
	prize_door <- doors[prize == "car"]    # note which door has prize
	my_pick  <- sample(doors, 1)    # note which door is chosen
	show <- sample(doors[!doors %in% c(my_pick, prize_door)],1)    # open door with no prize that isn't chosen
	stick <- my_pick    # stick with original door
	stick == prize_door    # test whether the original door has the prize
})
mean(stick)    # probability of choosing prize door when sticking
```

```{r}
# Simulate switching doors
switch <- replicate(B, {
	doors <- as.character(1:3)
	prize <- sample(c("car","goat","goat"))    # puts prizes in random order
	prize_door <- doors[prize == "car"]    # note which door has prize
	my_pick  <- sample(doors, 1)    # note which door is chosen first
	show <- sample(doors[!doors %in% c(my_pick, prize_door)], 1)    # open door with no prize that isn't chosen
	switch <- doors[!doors%in%c(my_pick, show)]    # switch to the door that wasn't chosen first or opened
	switch == prize_door    # test whether the switched door has the prize
})
mean(switch)    # probability of choosing prize door when switching
```

```{r}
### Datacamp Exercise

# Assign a variable 'n' as the number of remaining games.
n <- 6

# Assign a variable `outcomes` as a vector of possible game outcomes, where 0 indicates a loss and 1 indicates a win for the Cavs.
outcomes <- c(0,1)

# Assign a variable `l` to a list of all possible outcomes in all remaining games. Use the `rep` function on `list(outcomes)` to create list of length `n`. 
l <- rep(list(outcomes), n)

# Create a data frame named 'possibilities' that contains all combinations of possible outcomes for the remaining games.
possibilities <- expand.grid(l)

# Create a vector named 'results' that indicates whether each row in the data frame 'possibilities' contains enough wins for the Cavs to win the series.
results <- rowSums(possibilities)>=4

# Calculate the proportion of 'results' in which the Cavs win the series. Print the outcome to the console.
mean(results)
```

```{r}
# This line of example code simulates four independent random games where the Celtics either lose or win. Copy this example code to use within the `replicate` function.
simulated_games <- sample(c("lose","win"), 4, replace = TRUE, prob = c(0.6, 0.4))

# The variable 'B' specifies the number of times we want the simulation to run. Let's run the Monte Carlo simulation 10,000 times.
B <- 10000

# Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
set.seed(1)

# Create an object called `celtic_wins` that replicates two steps for B iterations: (1) generating a random four-game series `simulated_games` using the example code, then (2) determining whether the simulated series contains at least one win for the Celtics.
celtic_wins <- replicate(B, {
simulated_games <- sample(c("lose","win"), 4, replace = TRUE, prob = c(0.6, 0.4))
any(simulated_games == "win")
}
)
```

```{r}
# Let's assign the variable 'p' as the vector of probabilities that team A will win.
p <- seq(0.5, 0.95, 0.025)

# Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
prob_win <- function(p){
  B <- 10000
  result <- replicate(B, {
    b_win <- sample(c(1,0), 7, replace = TRUE, prob = c(1-p, p))
    sum(b_win)>=4
    })
  mean(result)
}

# Apply the 'prob_win' function across the vector of probabilities that team A will win to determine the probability that team B will win. Call this object 'Pr'.
Pr <- sapply(p, prob_win)

# Plot the probability 'p' on the x-axis and 'Pr' on the y-axis.
plot(p, Pr)
```

```{r}
# Given a value 'p', the probability of winning the series for the underdog team B can be computed with the following function based on a Monte Carlo simulation:
prob_win <- function(N, p=0.75){
      B <- 10000
      result <- replicate(B, {
        b_win <- sample(c(1,0), N, replace = TRUE, prob = c(1-p, p))
        sum(b_win)>=(N+1)/2
        })
      mean(result)
    }

# Assign the variable 'N' as the vector of series lengths. Use only odd numbers ranging from 1 to 25 games.
N <- seq(1, 25, 2)

# Apply the 'prob_win' function across the vector of series lengths to determine the probability that team B will win. Call this object `Pr`.
Pr <- sapply(N, prob_win)

# Plot the number of games in the series 'N' on the x-axis and 'Pr' on the y-axis.
plot(N, Pr)
```

```{r}
# Assessment

# Monte carlo
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
B <- 10000
set.seed(1)
results <- replicate(B, {
  outcomes <- sample(runners, 3)
  numeric <- outcomes == "Jamaica"
  sum(numeric) == 3
})
mean(results)

```

```{r}
# Function to calculate the number of meal combinations
compute_meals <- function(num_sides) {
  entree_combinations <- 6
  side_combinations <- nrow(combinations(num_sides, 2))  # Calculate combinations for 2 sides
  drink_combinations <- 3
  
  total_combinations <- entree_combinations * side_combinations * drink_combinations
  return(total_combinations)
}

# Apply the function to side counts ranging from 2 to 12
side_options <- 2:12
meal_combinations <- sapply(side_options, compute_meals)

# Find the minimum number of side options required to exceed 365 combinations
min_sides_required <- min(side_options[meal_combinations > 365])

min_sides_required
```

Esophageal cancer and alcohol/tobacco use

```{r}

data(esoph)
nrow(esoph)

esoph |>
  distinct(tobgp)

all_cases <- sum(esoph$ncases)

all_controls <- sum(esoph$ncontrols)

esoph |>
  filter(alcgp == "120+") |>
  summarize(n = n(),
            cases = sum(ncases),
            prop = cases / n)

high_alc_group <- esoph %>% filter(alcgp == "120+")


# Calculate the total number of cancer cases in the highest alcohol consumption group
total_cases_high_alc <- sum(high_alc_group$ncases)

# Calculate the total number of subjects (cases + controls) in the highest alcohol consumption group
total_subjects_high_alc <- sum(high_alc_group$ncases + high_alc_group$ncontrols)

# Calculate the probability of being a cancer case in the highest alcohol consumption group
probability_case_high_alc <- total_cases_high_alc / total_subjects_high_alc


low_alc_group <- esoph %>% filter(alcgp == "0-39g/day")

# Calculate the total number of cancer cases in the lowest alcohol consumption group
total_cases_low_alc <- sum(low_alc_group$ncases)

# Calculate the total number of subjects (cases + controls) in the lowest alcohol consumption group
total_subjects_low_alc <- sum(low_alc_group$ncases + low_alc_group$ncontrols)

# Calculate the probability of being a cancer case in the lowest alcohol consumption group
probability_case_low_alc <- total_cases_low_alc / total_subjects_low_alc


high_tobacco_group <- esoph %>% filter(tobgp %in% c("10-19g/day", "20-29g/day", "30+"))

# Calculate the total number of cancer cases in the "10g or more" tobacco group
total_cases_high_tobacco <- sum(high_tobacco_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case smokes 10g or more per day
probability_high_tobacco_given_case <- total_cases_high_tobacco / total_cases

# Display the result
probability_high_tobacco_given_case

nrow(high_tobacco_group)
nrow(esoph)

esoph |>
  filter(tobgp != "0-9g/day") |>
  summarize(cases = sum(ncontrols))
  
esoph |>
  summarize(cases = sum(ncontrols))

# Filter the dataset for the highest alcohol consumption group
high_alc_group <- esoph %>% filter(alcgp == "120+")

# Calculate the total number of cancer cases in the highest alcohol consumption group
total_cases_high_alc <- sum(high_alc_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case is in the highest alcohol consumption group
probability_high_alc_given_case <- total_cases_high_alc / total_cases



high_tobacco_group <- esoph %>% filter(tobgp == "30+")

# Calculate the total number of cancer cases in the highest tobacco consumption group
total_cases_high_tobacco <- sum(high_tobacco_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case is in the highest tobacco consumption group
probability_high_tobacco_given_case <- total_cases_high_tobacco / total_cases


high_alc_and_tobacco_group <- esoph %>% filter(alcgp == "120+", tobgp == "30+")

# Calculate the total number of cancer cases in this combined group
total_cases_high_alc_and_tobacco <- sum(high_alc_and_tobacco_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case is in both the highest alcohol and tobacco consumption groups
probability_high_alc_and_tobacco_given_case <- total_cases_high_alc_and_tobacco / total_cases


# Filter the dataset for cases in the highest alcohol group or the highest tobacco group
high_alc_or_tobacco_group <- esoph %>% filter(alcgp == "120+" | tobgp == "30+")

# Calculate the total number of cancer cases in these groups
total_cases_high_alc_or_tobacco <- sum(high_alc_or_tobacco_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case is in either the highest alcohol or tobacco group
probability_high_alc_or_tobacco_given_case <- total_cases_high_alc_or_tobacco / total_cases


# Filter the dataset for the highest alcohol consumption group and controls
high_alc_controls_group <- esoph %>% filter(alcgp == "120+")

# Calculate the total number of controls in the highest alcohol consumption group
total_controls_high_alc <- sum(high_alc_controls_group$ncontrols)

# Calculate the total number of controls in the entire dataset
total_controls <- sum(esoph$ncontrols)

# Calculate the probability that a person who is a control is in the highest alcohol consumption group
probability_high_alc_given_control <- total_controls_high_alc / total_controls


high_alc_group <- esoph %>% filter(alcgp == "120+")

# Calculate the total number of cancer cases in the highest alcohol consumption group
total_cases_high_alc <- sum(high_alc_group$ncases)

# Calculate the total number of cancer cases in the entire dataset
total_cases <- sum(esoph$ncases)

# Calculate the probability that a person who is a case is in the highest alcohol consumption group
probability_case_high_alc <- total_cases_high_alc / total_cases

# Filter the dataset for the highest alcohol consumption group
high_alc_controls_group <- esoph %>% filter(tobgp == "120+")

# Calculate the total number of controls in the highest alcohol consumption group
total_controls_high_alc <- sum(high_alc_controls_group$ncontrols)

# Calculate the total number of controls in the entire dataset
total_controls <- sum(esoph$ncontrols)

# Calculate the probability that a person who is a control is in the highest alcohol consumption group
probability_control_high_alc <- total_controls_high_alc / total_controls


# Filter the dataset for the highest tobacco consumption group
high_tobacco_controls_group <- esoph %>% filter(tobgp == "30+")

# Calculate the total number of controls in the highest tobacco consumption group
total_controls_high_tobacco <- sum(high_tobacco_controls_group$ncontrols)

# Calculate the total number of controls in the entire dataset
total_controls <- sum(esoph$ncontrols)

# Calculate the probability that a person who is a control is in the highest tobacco consumption group
probability_control_high_tobacco <- total_controls_high_tobacco / total_controls


# Filter the dataset for both highest alcohol and highest tobacco consumption groups, where the person is a control
high_alc_and_tobacco_controls_group <- esoph %>% filter(alcgp == "120+", tobgp == "30+")

# Calculate the total number of controls in this combined group
total_controls_high_alc_and_tobacco <- sum(high_alc_and_tobacco_controls_group$ncontrols)

# Calculate the total number of controls in the entire dataset
total_controls <- sum(esoph$ncontrols)

# Calculate the probability that a person who is a control is in both the highest alcohol and highest tobacco consumption groups
probability_control_high_alc_and_tobacco <- total_controls_high_alc_and_tobacco / total_controls


high_alc_or_tobacco_group <- esoph %>% filter(alcgp == "120+" | tobgp == "30+")

# Calculate the total number of cancer cases and controls in the combined group
cases_high_alc_or_tobacco <- sum(high_alc_or_tobacco_group$ncases)
controls_high_alc_or_tobacco <- sum(high_alc_or_tobacco_group$ncontrols)

# Calculate the total number of cancer cases and controls in the entire dataset
total_cases <- sum(esoph$ncases)
total_controls <- sum(esoph$ncontrols)

# Calculate the probability of being in the highest alcohol or tobacco group for cases and controls
probability_case_high_alc_or_tobacco <- cases_high_alc_or_tobacco / total_cases
probability_control_high_alc_or_tobacco <- controls_high_alc_or_tobacco / total_controls

# Calculate how many times more likely cases are to be in the highest alcohol or tobacco group compared to controls
likelihood_ratio <- probability_case_high_alc_or_tobacco / probability_control_high_alc_or_tobacco


high_alc_or_tobacco_controls_group <- esoph %>% filter(alcgp == "120+" | tobgp == "30+")

# Calculate the total number of controls in this combined group
total_controls_high_alc_or_tobacco <- sum(high_alc_or_tobacco_controls_group$ncontrols)

# Calculate the total number of controls in the entire dataset
total_controls <- sum(esoph$ncontrols)

# Calculate the probability that a person who is a control is in either the highest alcohol or tobacco consumption group
probability_control_high_alc_or_tobacco <- total_controls_high_alc_or_tobacco / total_controls


```

