
```{r}
library(tidyverse)
library(dslabs)
```

```{r}
x <- heights |>
  filter(sex == "Male") |>
  pull(height)

F <- function(a) mean(x <= a)

1 - F(70)
```


Discretization vs. Normal approximation

```{r}
# plot distribution of exact heights in data
plot(prop.table(table(x)), xlab = "a = Height in inches", ylab = "Pr(x = a)")

# probabilities in actual data over length 1 ranges containing an integer
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)

# probabilities in normal approximation match well
pnorm(68.5, mean(x), sd(x)) - pnorm(67.5, mean(x), sd(x))
pnorm(69.5, mean(x), sd(x)) - pnorm(68.5, mean(x), sd(x))
pnorm(70.5, mean(x), sd(x)) - pnorm(69.5, mean(x), sd(x))

# probabilities in actual data over other ranges don't match normal approx as well
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, mean(x), sd(x)) - pnorm(70.1, mean(x), sd(x))
```

```{r}
# dnorm can be used to plot density curve for normal distribution
# , giving the probability density of a certain z-score
x <- seq(-4, 4, length = 100)
data.frame(x, f = dnorm(x)) %>%
    ggplot(aes(x, f)) +
    geom_line()
```


Monte Carlos
```{r}
# generate simulated height data using normal distribution - both datasets should have n observations
n <- length(x)
avg <- mean(x)
s <- sd(x)
simulated_heights <- rnorm(n, avg, s)

# plot distribution of simulated_heights
data.frame(simulated_heights = simulated_heights) %>%
    ggplot(aes(simulated_heights)) +
    geom_histogram(color="black", binwidth = 2)
```

```{r}
B <- 10000
tallest <- replicate(B, {
    simulated_data <- rnorm(800, avg, s)    # generate 800 normally distributed random heights
    max(simulated_data)    # determine the tallest height
})
mean(tallest >= 7*12)    # proportion of times that tallest person exceeded 7 feet (84 inches)
```

R provides functions for density (d), quantile (q), probability distribution (p) and random number generation (r) for many of these distributions.

Test
```{r}
# Q1

set.seed(16, sample.kind = "Rounding")

act_scores <- rnorm(10000, 20.9, 5.7)

mean(act_scores)
sd(act_scores)

data.frame(act_scores) |>
  filter(act_scores == 36)

sum((act_scores) >= 36)

F <- function(a) mean(act_scores <= a)

mean(act_scores <= 10)

# Q2

x <- seq(1,36)
f_x <- dnorm(x, 20.9, 5.7)

plot(x, f_x)

# Q3



```

